/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package reg;

import java.awt.Component;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Miguel Angel
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtRegExp = new javax.swing.JTextField();
        btnProbar = new javax.swing.JButton();
        btnContengaPat = new javax.swing.JButton();
        btnNoContengaPat = new javax.swing.JButton();
        btnCoincida = new javax.swing.JButton();
        btnNoCoincida = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtSeleccion = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaTotal = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaCoincidencias = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaExclusiones = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        txtNombreVariable = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        btnMenuAbrir = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Generador Expresiones Regulares");
        setResizable(false);

        jLabel1.setText("RegExp Generada:");

        btnProbar.setText("Probar RegExp");
        btnProbar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProbarActionPerformed(evt);
            }
        });

        btnContengaPat.setText("Contenga Patr. Exacto");
        btnContengaPat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnContengaPatActionPerformed(evt);
            }
        });

        btnNoContengaPat.setText("No Contenga Patr. Exacto");
        btnNoContengaPat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNoContengaPatActionPerformed(evt);
            }
        });

        btnCoincida.setText("Coincida");
        btnCoincida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCoincidaActionPerformed(evt);
            }
        });

        btnNoCoincida.setText("No Coincida");

        jLabel2.setText("Seleccion Texto:");

        tablaTotal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nº Linea", "Texto"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaTotal.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tablaTotal.getTableHeader().setReorderingAllowed(false);
        tablaTotal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaTotalMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaTotal);
        if (tablaTotal.getColumnModel().getColumnCount() > 0) {
            tablaTotal.getColumnModel().getColumn(0).setResizable(false);
            tablaTotal.getColumnModel().getColumn(0).setPreferredWidth(70);
            tablaTotal.getColumnModel().getColumn(1).setResizable(false);
            tablaTotal.getColumnModel().getColumn(1).setPreferredWidth(850);
        }

        tablaCoincidencias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nº Linea", "Texto"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablaCoincidencias);
        if (tablaCoincidencias.getColumnModel().getColumnCount() > 0) {
            tablaCoincidencias.getColumnModel().getColumn(0).setResizable(false);
            tablaCoincidencias.getColumnModel().getColumn(0).setPreferredWidth(70);
            tablaCoincidencias.getColumnModel().getColumn(1).setResizable(false);
            tablaCoincidencias.getColumnModel().getColumn(1).setPreferredWidth(370);
        }

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Log linea a linea");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Coincidencias");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Exclusiones");

        tablaExclusiones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nº Linea", "Texto"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tablaExclusiones);
        if (tablaExclusiones.getColumnModel().getColumnCount() > 0) {
            tablaExclusiones.getColumnModel().getColumn(0).setResizable(false);
            tablaExclusiones.getColumnModel().getColumn(0).setPreferredWidth(70);
            tablaExclusiones.getColumnModel().getColumn(1).setResizable(false);
            tablaExclusiones.getColumnModel().getColumn(1).setPreferredWidth(370);
        }

        jLabel6.setText("Nombre de Variable:");

        jMenu1.setText("Archivo");

        btnMenuAbrir.setText("Abrir Log");
        btnMenuAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuAbrirActionPerformed(evt);
            }
        });
        jMenu1.add(btnMenuAbrir);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(4, 4, 4))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnContengaPat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnNoContengaPat, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCoincida, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnNoCoincida, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(152, 152, 152))
                            .addComponent(txtSeleccion)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtRegExp)
                                .addGap(18, 18, 18)
                                .addComponent(btnProbar, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtNombreVariable, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtRegExp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnProbar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtNombreVariable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnContengaPat)
                    .addComponent(btnNoContengaPat)
                    .addComponent(btnCoincida)
                    .addComponent(btnNoCoincida))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(txtSeleccion, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private final ArrayList<Linea> lineasTotales = new ArrayList<>();

    private void btnMenuAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuAbrirActionPerformed
        String log = abrirArchivo();
        lineasTotales.clear();
        String[] logLineaALinea = log.split("\n");

        DefaultTableModel modelExclusiones = (DefaultTableModel) tablaExclusiones.getModel();
        modelExclusiones.setRowCount(0);

        DefaultTableModel modelCoincidencias = (DefaultTableModel) tablaCoincidencias.getModel();
        modelCoincidencias.setRowCount(0);

        DefaultTableModel model = (DefaultTableModel) tablaTotal.getModel();
        model.setRowCount(0);
        for (int i = 0; i < logLineaALinea.length; i++) {
            lineasTotales.add(new Linea(i, logLineaALinea[i]));
            model.addRow(new Object[]{i, logLineaALinea[i]});
        }
        //TODO: cambiar el tamaño pre de finido de las columnas.
    }//GEN-LAST:event_btnMenuAbrirActionPerformed

    private void tablaTotalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaTotalMouseClicked
        txtSeleccion.setText(tablaTotal.getValueAt(tablaTotal.getSelectedRow(), 1).toString());
    }//GEN-LAST:event_tablaTotalMouseClicked

    private void btnContengaPatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnContengaPatActionPerformed
        String regexp = txtSeleccion.getSelectedText();

        String escaped = regexp.replaceAll("[\\<\\(\\[\\{\\\\\\^\\-\\=\\$\\!\\|\\]\\}\\)\\?\\*\\+\\.\\>]", "\\\\$0");
        escaped = escaped.replaceAll(" ", "\\\\s");

        String regAnterior = txtRegExp.getText();

        if (regAnterior.length() > 0) {
            txtRegExp.setText(regAnterior + escaped);
        } else {
            txtRegExp.setText(escaped);
        }
    }//GEN-LAST:event_btnContengaPatActionPerformed

    private void btnProbarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProbarActionPerformed
        DefaultTableModel modelCoincidencias = (DefaultTableModel) tablaCoincidencias.getModel();
        modelCoincidencias.setRowCount(0);

        DefaultTableModel modelExclusiones = (DefaultTableModel) tablaExclusiones.getModel();
        modelExclusiones.setRowCount(0);
        try {
            Pattern pattern = Pattern.compile(txtRegExp.getText());

            lineasTotales.stream().forEach((l) -> {
                Matcher matcher = pattern.matcher(l.getTexto());
                if (matcher.find()) {
                    modelCoincidencias.addRow(new Object[]{l.getNumero(), l.getTexto()});
                } else {
                    modelExclusiones.addRow(new Object[]{l.getNumero(), l.getTexto()});
                }
            });
        } catch (Exception e) {

        }
    }//GEN-LAST:event_btnProbarActionPerformed

    private void btnNoContengaPatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNoContengaPatActionPerformed
        String regexp = txtSeleccion.getSelectedText();

        String inicio = "^((?!";
        String fin = ").)*$";

        String escaped = regexp.replaceAll("[\\<\\(\\[\\{\\\\\\^\\-\\=\\$\\!\\|\\]\\}\\)\\?\\*\\+\\.\\>]", "\\\\$0");
        escaped = escaped.replaceAll(" ", "\\\\s");

        String txt = inicio + escaped + fin;

        String regAnterior = txtRegExp.getText();

        if (regAnterior.length() > 0) {
            txtRegExp.setText(regAnterior + txt);
        } else {
            txtRegExp.setText(txt);
        }
    }//GEN-LAST:event_btnNoContengaPatActionPerformed

    private void btnCoincidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCoincidaActionPerformed
        String regexp = txtSeleccion.getSelectedText();

        String regexpSalida = "";

        boolean continuar = true;

        if (pareceIP(regexp)) {
            String message = "El texto seleccionado parece corresponder con una IP,\n ¿desea agregar una expresión regular para IP's?";
            int answer = JOptionPane.showConfirmDialog(this, message);
            if (answer == JOptionPane.YES_OPTION) {
                regexpSalida = "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}";
                continuar = false;
            } else if (answer == JOptionPane.NO_OPTION) {
                continuar = true;
            }
        }
        
        if(pareceMAC(regexp)){
            String message = "El texto seleccionado parece corresponder con una dirección MAC,\n ¿desea agregar una expresión regular para MAC's?";
            int answer = JOptionPane.showConfirmDialog(this, message);
            if (answer == JOptionPane.YES_OPTION) {
                regexpSalida = "[a-fA-F0-9]{2}:[a-fA-F0-9]{2}:[a-fA-F0-9]{2}:[a-fA-F0-9]{2}:[a-fA-F0-9]{2}:[a-fA-F0-9]{2}";
                continuar = false;
            } else if (answer == JOptionPane.NO_OPTION) {
                continuar = true;
            }
        }
        
        if( pareceEMAIL(regexp)){
            
            String message = "El texto seleccionado parece corresponder con una dirección de Email,\n ¿desea agregar una expresión regular para Emails's?";
            int answer = JOptionPane.showConfirmDialog(this, message);
            if (answer == JOptionPane.YES_OPTION) {
                regexpSalida = "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}";
                continuar = false;
            } else if (answer == JOptionPane.NO_OPTION) {
                continuar = true;
            }
        }

        if (continuar) {
            int n = 1;
            boolean esLetra = false;
            boolean esNumero = false;

            for (int i = 0; i < regexp.length(); i++) {
                char c = regexp.charAt(i);

                if (esNumero(c)) {
                    if (esLetra) {
                        esLetra = false;
                        if (n > 1) {
                            regexpSalida += n + "}";
                        }
                        n = 1;
                    }

                    if (!esNumero) {
                        regexpSalida += "\\d";
                    } else if (n == 1) {
                        regexpSalida += "{1,";
                        n++;
                    } else {
                        n++;
                    }
                    esNumero = true;
                } else if (esLetra(c)) {

                    if (esNumero) {
                        esNumero = false;
                        if (n > 1) {
                            regexpSalida += n + "}";
                        }
                        n = 1;
                    }

                    if (!esLetra) {
                        regexpSalida += "\\w";
                    } else if (n == 1) {
                        regexpSalida += "{1,";
                        n++;
                    } else {
                        n++;
                    }
                    esLetra = true;
                } else if (esEspacio(c)) {
                    if (esLetra) {
                        esLetra = false;
                        if (n > 1) {
                            regexpSalida += n + "}";
                        }
                        n = 1;
                    }
                    if (esNumero) {
                        esNumero = false;
                        if (n > 1) {
                            regexpSalida += n + "}";
                        }
                        n = 1;
                    }

                    regexpSalida += "\\s*";

                } else {
                    if (n > 1) {
                        regexpSalida += n + "}";
                        n = 1;
                    }
                    esLetra = false;
                    esNumero = false;

                    String t = "" + c;

                    t = t.replaceAll("[\\<\\(\\[\\{\\\\\\^\\-\\=\\$\\!\\|\\]\\}\\)\\?\\*\\+\\.\\>]", "\\\\$0");

                    regexpSalida += t;
                }
            }

            if (n > 1) {
                regexpSalida += n + "}";
                n = 1;
            }

        }

        String ini = "(?<";
        String ini2 = ">";
        String fin = ")";

        if (txtNombreVariable.getText().length() > 0) {
            regexpSalida = ini + txtNombreVariable.getText() + ini2 + regexpSalida + fin;
            txtNombreVariable.setText("");
        } else {
            regexpSalida = "(" + regexpSalida + ")";
        }

        if (txtRegExp.getText().length() > 0) {
            txtRegExp.setText(txtRegExp.getText() + regexpSalida);
        } else {
            txtRegExp.setText(regexpSalida);
        }

    }//GEN-LAST:event_btnCoincidaActionPerformed

    public boolean esLetra(char c) {
        try {
            Pattern pattern = Pattern.compile("[a-zA-Z]{1,}?");
            String txt = "" + c;
            Matcher matcher = pattern.matcher(txt);
            if (matcher.matches()) {
                return true;
            }
        } catch (Exception e) {
            return false;
        }
        return false;
    }

    public boolean esNumero(char c) {
        try {
            Pattern pattern = Pattern.compile("\\d{1,}?");
            String txt = "" + c;
            Matcher matcher = pattern.matcher(txt);
            if (matcher.matches()) {
                return true;
            }
        } catch (Exception e) {
            return false;
        }
        return false;
    }

    public boolean esEspacio(char c) {
        try {
            Pattern pattern = Pattern.compile("\\s{1,}?");
            String txt = "" + c;
            Matcher matcher = pattern.matcher(txt);
            if (matcher.matches()) {
                return true;
            }
        } catch (Exception e) {
            return false;
        }
        return false;
    }

    

    public void resizeColumnWidth(JTable table) {
        final TableColumnModel columnModel = table.getColumnModel();
        for (int column = 0; column < table.getColumnCount(); column++) {
            int width = 50; // Min width
            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer renderer = table.getCellRenderer(row, column);
                Component comp = table.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width + 1, width);
            }
            columnModel.getColumn(column).setPreferredWidth(width);
        }
    }

    private String abrirArchivo() {
        String aux;
        String texto = "";
        try {
            /**
             * llamamos el metodo que permite cargar la ventana
             */
            JFileChooser file = new JFileChooser();
            file.showOpenDialog(this);
            /**
             * abrimos el archivo seleccionado
             */
            File abre = file.getSelectedFile();

            /**
             * recorremos el archivo, lo leemos para plasmarlo en el area de
             * texto
             */
            if (abre != null) {
                FileReader archivos = new FileReader(abre);
                try (BufferedReader lee = new BufferedReader(archivos)) {
                    while ((aux = lee.readLine()) != null) {
                        texto += aux + "\n";
                    }
                }
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex + ""
                    + "\nNo se ha encontrado el archivo",
                    "ADVERTENCIA!!!", JOptionPane.WARNING_MESSAGE);
        }
        return texto;//El texto se almacena en el JTextArea
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new VentanaPrincipal().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCoincida;
    private javax.swing.JButton btnContengaPat;
    private javax.swing.JMenuItem btnMenuAbrir;
    private javax.swing.JButton btnNoCoincida;
    private javax.swing.JButton btnNoContengaPat;
    private javax.swing.JButton btnProbar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tablaCoincidencias;
    private javax.swing.JTable tablaExclusiones;
    private javax.swing.JTable tablaTotal;
    private javax.swing.JTextField txtNombreVariable;
    private javax.swing.JTextField txtRegExp;
    private javax.swing.JTextField txtSeleccion;
    // End of variables declaration//GEN-END:variables

    private boolean pareceMAC(String s) {
        try {
            Pattern pattern = Pattern.compile("([a-fA-F0-9]{2}:[a-fA-F0-9]{2}:[a-fA-F0-9]{2}:[a-fA-F0-9]{2}:[a-fA-F0-9]{2}:[a-fA-F0-9]{2})");
            String txt = s;
            Matcher matcher = pattern.matcher(txt);
            if (matcher.matches()) {
                return true;
            }
        } catch (Exception e) {
            return false;
        }
        return false;
    }
    
    public boolean pareceIP(String s) {
        try {
            Pattern pattern = Pattern.compile("\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}");
            String txt = s;
            Matcher matcher = pattern.matcher(txt);
            if (matcher.matches()) {
                return true;
            }
        } catch (Exception e) {
            return false;
        }
        return false;
    }

    private boolean pareceEMAIL(String s) {
        try {
            Pattern pattern = Pattern.compile("[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}");
            String txt = s;
            Matcher matcher = pattern.matcher(txt);
            if (matcher.matches()) {
                return true;
            }
        } catch (Exception e) {
            return false;
        }
        return false;
    }
}
